// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from ctg.xsd.
 */

#ifndef SRC_RO_ULBSIBIU_ACAPS_CTG_XML_SCHEMA_CTG_HXX
#define SRC_RO_ULBSIBIU_ACAPS_CTG_XML_SCHEMA_CTG_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char unsigned_byte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short short_;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short unsigned_short;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int int_;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int unsigned_int;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long long_;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long unsigned_long;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long non_positive_integer;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long non_negative_integer;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long positive_integer;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long negative_integer;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float float_;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double double_;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, simple_type > string;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, token > name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, token > language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, ncname > id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone time_zone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, simple_type > date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, simple_type > time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;


  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace research
{
  namespace noc
  {
    namespace application_mapping
    {
      namespace unified_framework
      {
        namespace schema
        {
          namespace ctg
          {
            class ctgType;
            class communicationType;
            class communicatingTaskType;
            class unsignedDouble;
            class deadlineType;
            class volume;
            class type;
          }
        }
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace research
{
  namespace noc
  {
    namespace application_mapping
    {
      namespace unified_framework
      {
        namespace schema
        {
          /**
           * @brief C++ namespace for the %http://webspace.ulbsibiu.ro/ciprian.radu/research/noc/application_mapping/unified_framework/schema/ctg
           * schema namespace.
           */
          namespace ctg
          {
            /**
             * @brief Class corresponding to the %ctgType schema type.
             *
             * @nosubgrouping
             */
            class ctgType: public ::xml_schema::type
            {
              public:
              /**
               * @name communication
               *
               * @brief Accessor and modifier functions for the %communication
               * sequence element.
               */
              //@{

              /**
               * @brief Element type.
               */
              typedef ::research::noc::application_mapping::unified_framework::schema::ctg::communicationType communication_type;

              /**
               * @brief Element sequence container type.
               */
              typedef ::xsd::cxx::tree::sequence< communication_type > communication_sequence;

              /**
               * @brief Element iterator type.
               */
              typedef communication_sequence::iterator communication_iterator;

              /**
               * @brief Element constant iterator type.
               */
              typedef communication_sequence::const_iterator communication_const_iterator;

              /**
               * @brief Element traits type.
               */
              typedef ::xsd::cxx::tree::traits< communication_type, char > communication_traits;

              /**
               * @brief Return a read-only (constant) reference to the element
               * sequence.
               *
               * @return A constant reference to the sequence container.
               */
              const communication_sequence&
              communication () const;

              /**
               * @brief Return a read-write reference to the element sequence.
               *
               * @return A reference to the sequence container.
               */
              communication_sequence&
              communication ();

              /**
               * @brief Copy elements from a given sequence.
               *
               * @param s A sequence to copy elements from.
               *
               * For each element in @a s this function makes a copy and adds it 
               * to the sequence. Note that this operation completely changes the 
               * sequence and all old elements will be lost.
               */
              void
              communication (const communication_sequence& s);

              //@}

              /**
               * @name id
               *
               * @brief Accessor and modifier functions for the %id
               * required attribute.
               *
               * The ID of this CTG.
               */
              //@{

              /**
               * @brief Attribute type.
               */
              typedef ::xml_schema::id id_type;

              /**
               * @brief Attribute traits type.
               */
              typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

              /**
               * @brief Return a read-only (constant) reference to the attribute.
               *
               * @return A constant reference to the attribute.
               */
              const id_type&
              id () const;

              /**
               * @brief Return a read-write reference to the attribute.
               *
               * @return A reference to the attribute.
               */
              id_type&
              id ();

              /**
               * @brief Set the attribute value.
               *
               * @param x A new value to set.
               *
               * This function makes a copy of its argument and sets it as
               * the new value of the attribute.
               */
              void
              id (const id_type& x);

              /**
               * @brief Set the attribute value without copying.
               *
               * @param p A new value to use.
               *
               * This function will try to use the passed value directly
               * instead of making a copy.
               */
              void
              id (::std::auto_ptr< id_type > p);

              //@}

              /**
               * @name period
               *
               * @brief Accessor and modifier functions for the %period
               * optional attribute.
               *
               * The periodicity (in miliseconds) of this CTG.
               */
              //@{

              /**
               * @brief Attribute type.
               */
              typedef ::research::noc::application_mapping::unified_framework::schema::ctg::unsignedDouble period_type;

              /**
               * @brief Attribute optional container type.
               */
              typedef ::xsd::cxx::tree::optional< period_type > period_optional;

              /**
               * @brief Attribute traits type.
               */
              typedef ::xsd::cxx::tree::traits< period_type, char > period_traits;

              /**
               * @brief Return a read-only (constant) reference to the attribute
               * container.
               *
               * @return A constant reference to the optional container.
               */
              const period_optional&
              period () const;

              /**
               * @brief Return a read-write reference to the attribute container.
               *
               * @return A reference to the optional container.
               */
              period_optional&
              period ();

              /**
               * @brief Set the attribute value.
               *
               * @param x A new value to set.
               *
               * This function makes a copy of its argument and sets it as
               * the new value of the attribute.
               */
              void
              period (const period_type& x);

              /**
               * @brief Set the attribute value.
               *
               * @param x An optional container with the new value to set.
               *
               * If the value is present in @a x then this function makes a copy 
               * of this value and sets it as the new value of the attribute.
               * Otherwise the attribute container is set the 'not present' state.
               */
              void
              period (const period_optional& x);

              /**
               * @brief Set the attribute value without copying.
               *
               * @param p A new value to use.
               *
               * This function will try to use the passed value directly instead
               * of making a copy.
               */
              void
              period (::std::auto_ptr< period_type > p);

              //@}

              /**
               * @name Constructors
               */
              //@{

              /**
               * @brief Create an instance from the ultimate base and
               * initializers for required elements and attributes.
               */
              ctgType (const id_type&);

              /**
               * @brief Create an instance from a DOM element.
               *
               * @param e A DOM element to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              ctgType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

              /**
               * @brief Copy constructor.
               *
               * @param x An instance to make a copy of.
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               *
               * For polymorphic object models use the @c _clone function instead.
               */
              ctgType (const ctgType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

              /**
               * @brief Copy the instance polymorphically.
               *
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               * @return A pointer to the dynamically allocated copy.
               *
               * This function ensures that the dynamic type of the instance is
               * used for copying and should be used for polymorphic object
               * models instead of the copy constructor.
               */
              virtual ctgType*
              _clone (::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0) const;

              //@}

              /**
               * @brief Destructor.
               */
              virtual 
              ~ctgType ();

              // Implementation.
              //

              //@cond

              protected:
              void
              parse (::xsd::cxx::xml::dom::parser< char >&,
                     ::xml_schema::flags);

              protected:
              communication_sequence communication_;
              ::xsd::cxx::tree::one< id_type > id_;
              period_optional period_;

              //@endcond
            };

            /**
             * @brief Class corresponding to the %communicationType schema type.
             *
             * @nosubgrouping
             */
            class communicationType: public ::xml_schema::type
            {
              public:
              /**
               * @name source
               *
               * @brief Accessor and modifier functions for the %source
               * required element.
               *
               * The ID of the communication's source task.
               */
              //@{

              /**
               * @brief Element type.
               */
              typedef ::research::noc::application_mapping::unified_framework::schema::ctg::communicatingTaskType source_type;

              /**
               * @brief Element traits type.
               */
              typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

              /**
               * @brief Return a read-only (constant) reference to the element.
               *
               * @return A constant reference to the element.
               */
              const source_type&
              source () const;

              /**
               * @brief Return a read-write reference to the element.
               *
               * @return A reference to the element.
               */
              source_type&
              source ();

              /**
               * @brief Set the element value.
               *
               * @param x A new value to set.
               *
               * This function makes a copy of its argument and sets it as
               * the new value of the element.
               */
              void
              source (const source_type& x);

              /**
               * @brief Set the element value without copying.
               *
               * @param p A new value to use.
               *
               * This function will try to use the passed value directly
               * instead of making a copy.
               */
              void
              source (::std::auto_ptr< source_type > p);

              //@}

              /**
               * @name destination
               *
               * @brief Accessor and modifier functions for the %destination
               * required element.
               *
               * The ID of the communication's destination task.
               */
              //@{

              /**
               * @brief Element type.
               */
              typedef ::research::noc::application_mapping::unified_framework::schema::ctg::communicatingTaskType destination_type;

              /**
               * @brief Element traits type.
               */
              typedef ::xsd::cxx::tree::traits< destination_type, char > destination_traits;

              /**
               * @brief Return a read-only (constant) reference to the element.
               *
               * @return A constant reference to the element.
               */
              const destination_type&
              destination () const;

              /**
               * @brief Return a read-write reference to the element.
               *
               * @return A reference to the element.
               */
              destination_type&
              destination ();

              /**
               * @brief Set the element value.
               *
               * @param x A new value to set.
               *
               * This function makes a copy of its argument and sets it as
               * the new value of the element.
               */
              void
              destination (const destination_type& x);

              /**
               * @brief Set the element value without copying.
               *
               * @param p A new value to use.
               *
               * This function will try to use the passed value directly
               * instead of making a copy.
               */
              void
              destination (::std::auto_ptr< destination_type > p);

              //@}

              /**
               * @name volume
               *
               * @brief Accessor and modifier functions for the %volume
               * required element.
               *
               * The communication volume (in bits).
               */
              //@{

              /**
               * @brief Element type.
               */
              typedef ::research::noc::application_mapping::unified_framework::schema::ctg::volume volume_type;

              /**
               * @brief Element traits type.
               */
              typedef ::xsd::cxx::tree::traits< volume_type, char > volume_traits;

              /**
               * @brief Return a read-only (constant) reference to the element.
               *
               * @return A constant reference to the element.
               */
              const volume_type&
              volume () const;

              /**
               * @brief Return a read-write reference to the element.
               *
               * @return A reference to the element.
               */
              volume_type&
              volume ();

              /**
               * @brief Set the element value.
               *
               * @param x A new value to set.
               *
               * This function makes a copy of its argument and sets it as
               * the new value of the element.
               */
              void
              volume (const volume_type& x);

              /**
               * @brief Set the element value without copying.
               *
               * @param p A new value to use.
               *
               * This function will try to use the passed value directly
               * instead of making a copy.
               */
              void
              volume (::std::auto_ptr< volume_type > p);

              //@}

              /**
               * @name Constructors
               */
              //@{

              /**
               * @brief Create an instance from the ultimate base and
               * initializers for required elements and attributes.
               */
              communicationType (const source_type&,
                                 const destination_type&,
                                 const volume_type&);

              /**
               * @brief Create an instance from the ultimate base and
               * initializers for required elements and attributes
               * (auto_ptr version).
               *
               * This constructor will try to use the passed values directly
               * instead of making copies.
               */
              communicationType (::std::auto_ptr< source_type >&,
                                 ::std::auto_ptr< destination_type >&,
                                 const volume_type&);

              /**
               * @brief Create an instance from a DOM element.
               *
               * @param e A DOM element to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              communicationType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

              /**
               * @brief Copy constructor.
               *
               * @param x An instance to make a copy of.
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               *
               * For polymorphic object models use the @c _clone function instead.
               */
              communicationType (const communicationType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

              /**
               * @brief Copy the instance polymorphically.
               *
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               * @return A pointer to the dynamically allocated copy.
               *
               * This function ensures that the dynamic type of the instance is
               * used for copying and should be used for polymorphic object
               * models instead of the copy constructor.
               */
              virtual communicationType*
              _clone (::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0) const;

              //@}

              /**
               * @brief Destructor.
               */
              virtual 
              ~communicationType ();

              // Implementation.
              //

              //@cond

              protected:
              void
              parse (::xsd::cxx::xml::dom::parser< char >&,
                     ::xml_schema::flags);

              protected:
              ::xsd::cxx::tree::one< source_type > source_;
              ::xsd::cxx::tree::one< destination_type > destination_;
              ::xsd::cxx::tree::one< volume_type > volume_;

              //@endcond
            };

            /**
             * @brief Class corresponding to the %communicatingTaskType schema type.
             *
             * @nosubgrouping
             */
            class communicatingTaskType: public ::xml_schema::type
            {
              public:
              /**
               * @name deadline
               *
               * @brief Accessor and modifier functions for the %deadline
               * sequence element.
               */
              //@{

              /**
               * @brief Element type.
               */
              typedef ::research::noc::application_mapping::unified_framework::schema::ctg::deadlineType deadline_type;

              /**
               * @brief Element sequence container type.
               */
              typedef ::xsd::cxx::tree::sequence< deadline_type > deadline_sequence;

              /**
               * @brief Element iterator type.
               */
              typedef deadline_sequence::iterator deadline_iterator;

              /**
               * @brief Element constant iterator type.
               */
              typedef deadline_sequence::const_iterator deadline_const_iterator;

              /**
               * @brief Element traits type.
               */
              typedef ::xsd::cxx::tree::traits< deadline_type, char > deadline_traits;

              /**
               * @brief Return a read-only (constant) reference to the element
               * sequence.
               *
               * @return A constant reference to the sequence container.
               */
              const deadline_sequence&
              deadline () const;

              /**
               * @brief Return a read-write reference to the element sequence.
               *
               * @return A reference to the sequence container.
               */
              deadline_sequence&
              deadline ();

              /**
               * @brief Copy elements from a given sequence.
               *
               * @param s A sequence to copy elements from.
               *
               * For each element in @a s this function makes a copy and adds it 
               * to the sequence. Note that this operation completely changes the 
               * sequence and all old elements will be lost.
               */
              void
              deadline (const deadline_sequence& s);

              //@}

              /**
               * @name id
               *
               * @brief Accessor and modifier functions for the %id
               * required attribute.
               */
              //@{

              /**
               * @brief Attribute type.
               */
              typedef ::xml_schema::string id_type;

              /**
               * @brief Attribute traits type.
               */
              typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

              /**
               * @brief Return a read-only (constant) reference to the attribute.
               *
               * @return A constant reference to the attribute.
               */
              const id_type&
              id () const;

              /**
               * @brief Return a read-write reference to the attribute.
               *
               * @return A reference to the attribute.
               */
              id_type&
              id ();

              /**
               * @brief Set the attribute value.
               *
               * @param x A new value to set.
               *
               * This function makes a copy of its argument and sets it as
               * the new value of the attribute.
               */
              void
              id (const id_type& x);

              /**
               * @brief Set the attribute value without copying.
               *
               * @param p A new value to use.
               *
               * This function will try to use the passed value directly
               * instead of making a copy.
               */
              void
              id (::std::auto_ptr< id_type > p);

              //@}

              /**
               * @name Constructors
               */
              //@{

              /**
               * @brief Create an instance from the ultimate base and
               * initializers for required elements and attributes.
               */
              communicatingTaskType (const id_type&);

              /**
               * @brief Create an instance from a DOM element.
               *
               * @param e A DOM element to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              communicatingTaskType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

              /**
               * @brief Copy constructor.
               *
               * @param x An instance to make a copy of.
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               *
               * For polymorphic object models use the @c _clone function instead.
               */
              communicatingTaskType (const communicatingTaskType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

              /**
               * @brief Copy the instance polymorphically.
               *
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               * @return A pointer to the dynamically allocated copy.
               *
               * This function ensures that the dynamic type of the instance is
               * used for copying and should be used for polymorphic object
               * models instead of the copy constructor.
               */
              virtual communicatingTaskType*
              _clone (::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0) const;

              //@}

              /**
               * @brief Destructor.
               */
              virtual 
              ~communicatingTaskType ();

              // Implementation.
              //

              //@cond

              protected:
              void
              parse (::xsd::cxx::xml::dom::parser< char >&,
                     ::xml_schema::flags);

              protected:
              deadline_sequence deadline_;
              ::xsd::cxx::tree::one< id_type > id_;

              //@endcond
            };

            /**
             * @brief Class corresponding to the %unsignedDouble schema type.
             *
             * @nosubgrouping
             */
            class unsignedDouble: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
            {
              public:
              /**
               * @name Constructors
               */
              //@{

              /**
               * @brief Create an instance from the ultimate base and
               * initializers for required elements and attributes.
               */
              unsignedDouble (const ::xml_schema::double_&);

              /**
               * @brief Create an instance from a DOM element.
               *
               * @param e A DOM element to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              unsignedDouble (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

              /**
               * @brief Create an instance from a DOM attribute.
               *
               * @param a A DOM attribute to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              unsignedDouble (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

              /**
               * @brief Create an instance from a string fragment.
               *
               * @param s A string fragment to extract the data from.
               * @param e A pointer to DOM element containing the string fragment.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              unsignedDouble (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

              /**
               * @brief Copy constructor.
               *
               * @param x An instance to make a copy of.
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               *
               * For polymorphic object models use the @c _clone function instead.
               */
              unsignedDouble (const unsignedDouble& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

              /**
               * @brief Copy the instance polymorphically.
               *
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               * @return A pointer to the dynamically allocated copy.
               *
               * This function ensures that the dynamic type of the instance is
               * used for copying and should be used for polymorphic object
               * models instead of the copy constructor.
               */
              virtual unsignedDouble*
              _clone (::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0) const;

              //@}

              /**
               * @brief Destructor.
               */
              virtual 
              ~unsignedDouble ();
            };

            /**
             * @brief Class corresponding to the %deadlineType schema type.
             *
             * Task deadline (in milliseconds).
             *
             * @nosubgrouping
             */
            class deadlineType: public ::research::noc::application_mapping::unified_framework::schema::ctg::unsignedDouble
            {
              public:
              /**
               * @name type
               *
               * @brief Accessor and modifier functions for the %type
               * optional attribute.
               */
              //@{

              /**
               * @brief Attribute type.
               */
              typedef ::research::noc::application_mapping::unified_framework::schema::ctg::type type_type;

              /**
               * @brief Attribute optional container type.
               */
              typedef ::xsd::cxx::tree::optional< type_type > type_optional;

              /**
               * @brief Attribute traits type.
               */
              typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

              /**
               * @brief Return a read-only (constant) reference to the attribute
               * container.
               *
               * @return A constant reference to the optional container.
               */
              const type_optional&
              type () const;

              /**
               * @brief Return a read-write reference to the attribute container.
               *
               * @return A reference to the optional container.
               */
              type_optional&
              type ();

              /**
               * @brief Set the attribute value.
               *
               * @param x A new value to set.
               *
               * This function makes a copy of its argument and sets it as
               * the new value of the attribute.
               */
              void
              type (const type_type& x);

              /**
               * @brief Set the attribute value.
               *
               * @param x An optional container with the new value to set.
               *
               * If the value is present in @a x then this function makes a copy 
               * of this value and sets it as the new value of the attribute.
               * Otherwise the attribute container is set the 'not present' state.
               */
              void
              type (const type_optional& x);

              /**
               * @brief Set the attribute value without copying.
               *
               * @param p A new value to use.
               *
               * This function will try to use the passed value directly instead
               * of making a copy.
               */
              void
              type (::std::auto_ptr< type_type > p);

              //@}

              /**
               * @name Constructors
               */
              //@{

              /**
               * @brief Create an instance from the ultimate base and
               * initializers for required elements and attributes.
               */
              deadlineType (const ::xml_schema::double_&);

              /**
               * @brief Create an instance from a DOM element.
               *
               * @param e A DOM element to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              deadlineType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

              /**
               * @brief Copy constructor.
               *
               * @param x An instance to make a copy of.
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               *
               * For polymorphic object models use the @c _clone function instead.
               */
              deadlineType (const deadlineType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

              /**
               * @brief Copy the instance polymorphically.
               *
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               * @return A pointer to the dynamically allocated copy.
               *
               * This function ensures that the dynamic type of the instance is
               * used for copying and should be used for polymorphic object
               * models instead of the copy constructor.
               */
              virtual deadlineType*
              _clone (::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0) const;

              //@}

              /**
               * @brief Destructor.
               */
              virtual 
              ~deadlineType ();

              // Implementation.
              //

              //@cond

              protected:
              void
              parse (::xsd::cxx::xml::dom::parser< char >&,
                     ::xml_schema::flags);

              protected:
              type_optional type_;

              //@endcond
            };

            /**
             * @brief Class corresponding to the %volume schema type.
             *
             * @nosubgrouping
             */
            class volume: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
            {
              public:
              /**
               * @name Constructors
               */
              //@{

              /**
               * @brief Create an instance from the ultimate base and
               * initializers for required elements and attributes.
               */
              volume (const ::xml_schema::double_&);

              /**
               * @brief Create an instance from a DOM element.
               *
               * @param e A DOM element to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              volume (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

              /**
               * @brief Create an instance from a DOM attribute.
               *
               * @param a A DOM attribute to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              volume (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

              /**
               * @brief Create an instance from a string fragment.
               *
               * @param s A string fragment to extract the data from.
               * @param e A pointer to DOM element containing the string fragment.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              volume (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

              /**
               * @brief Copy constructor.
               *
               * @param x An instance to make a copy of.
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               *
               * For polymorphic object models use the @c _clone function instead.
               */
              volume (const volume& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

              /**
               * @brief Copy the instance polymorphically.
               *
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               * @return A pointer to the dynamically allocated copy.
               *
               * This function ensures that the dynamic type of the instance is
               * used for copying and should be used for polymorphic object
               * models instead of the copy constructor.
               */
              virtual volume*
              _clone (::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0) const;

              //@}

              /**
               * @brief Destructor.
               */
              virtual 
              ~volume ();
            };

            /**
             * @brief Enumeration class corresponding to the %type
             * schema type.
             */
            class type: public ::xml_schema::string
            {
              public:

              /**
               * @brief Underlying enum type.
               */
              enum value
              {
                soft,
                hard
              };

              /**
               * @brief Create an instance from the underlying enum value.
               *
               * @param v A enum value.
               */
              type (value v);

              /**
               * @brief Create an instance from a C string.
               *
               * @param v A string value.
               */
              type (const char* v);

              /**
               * @brief Create an instance from a string.
               *
               * @param v A string value.
               */
              type (const ::std::string& v);

              /**
               * @brief Create an instance from the base value.
               *
               * @param v A base value.
               */
              type (const ::xml_schema::string& v);

              /**
               * @brief Create an instance from a DOM element.
               *
               * @param e A DOM element to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

              /**
               * @brief Create an instance from a DOM attribute.
               *
               * @param a A DOM attribute to extract the data from.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              type (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

              /**
               * @brief Create an instance from a string fragment.
               *
               * @param s A string fragment to extract the data from.
               * @param e A pointer to DOM element containing the string fragment.
               * @param f Flags to create the new instance with.
               * @param c A pointer to the object that will contain the new
               * instance.
               */
              type (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

              /**
               * @brief Copy constructor.
               *
               * @param x An instance to make a copy of.
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               *
               * For polymorphic object models use the @c _clone function instead.
               */
              type (const type& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

              /**
               * @brief Copy the instance polymorphically.
               *
               * @param f Flags to create the copy with.
               * @param c A pointer to the object that will contain the copy.
               * @return A pointer to the dynamically allocated copy.
               *
               * This function ensures that the dynamic type of the instance is
               * used for copying and should be used for polymorphic object
               * models instead of the copy constructor.
               */
              virtual type*
              _clone (::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0) const;

              /**
               * @brief Assign the underlying enum value.
               *
               * @param v A enum value.
               * @return A refernce to the instance.
               */
              type&
              operator= (value v);

              /**
               * @brief Implicit conversion operator to the underlying
               * enum value.
               *
               * @return A enum value.
               */
              virtual
              operator value () const
              {
                return _xsd_type_convert ();
              }

              //@cond

              protected:
              value
              _xsd_type_convert () const;

              public:
              static const char* const _xsd_type_literals_[2];
              static const value _xsd_type_indexes_[2];

              //@endcond
            };
          }
        }
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace research
{
  namespace noc
  {
    namespace application_mapping
    {
      namespace unified_framework
      {
        namespace schema
        {
          namespace ctg
          {
            /**
             * @name Parsing functions for the %ctg document root.
             */
            //@{

            /**
             * @brief Parse a URI or a local file.
             *
             * @param uri A URI or a local file name.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function uses exceptions to report parsing errors.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a URI or a local file with an error handler.
             *
             * @param uri A URI or a local file name.
             * @param eh An error handler.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function reports parsing errors by calling the error handler.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a URI or a local file with a Xerces-C++ DOM error
             * handler.
             *
             * @param uri A URI or a local file name.
             * @param eh A Xerces-C++ DOM error handler.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function reports parsing errors by calling the error handler.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a standard input stream.
             *
             * @param is A standrad input stream.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function uses exceptions to report parsing errors.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a standard input stream with an error handler.
             *
             * @param is A standrad input stream.
             * @param eh An error handler.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function reports parsing errors by calling the error handler.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a standard input stream with a Xerces-C++ DOM error
             * handler.
             *
             * @param is A standrad input stream.
             * @param eh A Xerces-C++ DOM error handler.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function reports parsing errors by calling the error handler.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a standard input stream with a resource id.
             *
             * @param is A standrad input stream.
             * @param id A resource id.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * The resource id is used to identify the document being parsed in
             * diagnostics as well as to resolve relative paths.
             *
             * This function uses exceptions to report parsing errors.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a standard input stream with a resource id and an
             * error handler.
             *
             * @param is A standrad input stream.
             * @param id A resource id.
             * @param eh An error handler.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * The resource id is used to identify the document being parsed in
             * diagnostics as well as to resolve relative paths.
             *
             * This function reports parsing errors by calling the error handler.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a standard input stream with a resource id and a
             * Xerces-C++ DOM error handler.
             *
             * @param is A standrad input stream.
             * @param id A resource id.
             * @param eh A Xerces-C++ DOM error handler.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * The resource id is used to identify the document being parsed in
             * diagnostics as well as to resolve relative paths.
             *
             * This function reports parsing errors by calling the error handler.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a Xerces-C++ input source.
             *
             * @param is A Xerces-C++ input source.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function uses exceptions to report parsing errors.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a Xerces-C++ input source with an error handler.
             *
             * @param is A Xerces-C++ input source.
             * @param eh An error handler.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function reports parsing errors by calling the error handler.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
             * error handler.
             *
             * @param is A Xerces-C++ input source.
             * @param eh A Xerces-C++ DOM error handler.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function reports parsing errors by calling the error handler.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a Xerces-C++ DOM document.
             *
             * @param d A Xerces-C++ DOM document.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            /**
             * @brief Parse a Xerces-C++ DOM document.
             *
             * @param d A pointer to the Xerces-C++ DOM document.
             * @param f Parsing flags.
             * @param p Parsing properties. 
             * @return A pointer to the root of the object model.
             *
             * This function is normally used together with the keep_dom and
             * own_dom parsing flags to assign ownership of the DOM document
             * to the object model.
             */
            ::std::auto_ptr< ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType >
            ctg (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

            //@}
          }
        }
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace research
{
  namespace noc
  {
    namespace application_mapping
    {
      namespace unified_framework
      {
        namespace schema
        {
          namespace ctg
          {
            void
            operator<< (::xercesc::DOMElement&, const ctgType&);

            void
            operator<< (::xercesc::DOMElement&, const communicationType&);

            /**
             * @name Serialization functions for the %ctg document root.
             */
            //@{

            /**
             * @brief Serialize to a standard output stream.
             *
             * @param os A standrad output stream.
             * @param x An object model to serialize.
             * @param m A namespace information map.
             * @param e A character encoding to produce XML in.
             * @param f Serialization flags.
             *
             * This function uses exceptions to report serialization errors.
             */
            void
            ctg (::std::ostream& os,
                 const ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

            /**
             * @brief Serialize to a standard output stream with an error handler.
             *
             * @param os A standrad output stream.
             * @param x An object model to serialize.
             * @param eh An error handler.
             * @param m A namespace information map.
             * @param e A character encoding to produce XML in.
             * @param f Serialization flags.
             *
             * This function reports serialization errors by calling the error
             * handler.
             */
            void
            ctg (::std::ostream& os,
                 const ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

            /**
             * @brief Serialize to a standard output stream with a Xerces-C++ DOM
             * error handler.
             *
             * @param os A standrad output stream.
             * @param x An object model to serialize.
             * @param eh A Xerces-C++ DOM error handler.
             * @param m A namespace information map.
             * @param e A character encoding to produce XML in.
             * @param f Serialization flags.
             *
             * This function reports serialization errors by calling the error
             * handler.
             */
            void
            ctg (::std::ostream& os,
                 const ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

            /**
             * @brief Serialize to a Xerces-C++ XML format target.
             *
             * @param ft A Xerces-C++ XML format target.
             * @param x An object model to serialize.
             * @param m A namespace information map.
             * @param e A character encoding to produce XML in.
             * @param f Serialization flags.
             *
             * This function uses exceptions to report serialization errors.
             */
            void
            ctg (::xercesc::XMLFormatTarget& ft,
                 const ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

            /**
             * @brief Serialize to a Xerces-C++ XML format target with an error
             * handler.
             *
             * @param ft A Xerces-C++ XML format target.
             * @param x An object model to serialize.
             * @param eh An error handler.
             * @param m A namespace information map.
             * @param e A character encoding to produce XML in.
             * @param f Serialization flags.
             *
             * This function reports serialization errors by calling the error
             * handler.
             */
            void
            ctg (::xercesc::XMLFormatTarget& ft,
                 const ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

            /**
             * @brief Serialize to a Xerces-C++ XML format target with a
             * Xerces-C++ DOM error handler.
             *
             * @param ft A Xerces-C++ XML format target.
             * @param x An object model to serialize.
             * @param eh A Xerces-C++ DOM error handler.
             * @param m A namespace information map.
             * @param e A character encoding to produce XML in.
             * @param f Serialization flags.
             *
             * This function reports serialization errors by calling the error
             * handler.
             */
            void
            ctg (::xercesc::XMLFormatTarget& ft,
                 const ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

            /**
             * @brief Serialize to an existing Xerces-C++ DOM document.
             *
             * @param d A Xerces-C++ DOM document.
             * @param x An object model to serialize.
             * @param f Serialization flags.
             *
             * Note that it is your responsibility to create the DOM document
             * with the correct root element as well as set the necessary
             * namespace mapping attributes.
             */
            void
            ctg (::xercesc::DOMDocument& d,
                 const ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType& x,
                 ::xml_schema::flags f = 0);

            /**
             * @brief Serialize to a new Xerces-C++ DOM document.
             *
             * @param x An object model to serialize.
             * @param m A namespace information map.
             * @param f Serialization flags.
             * @return A pointer to the new Xerces-C++ DOM document.
             */
            ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
            ctg (const ::research::noc::application_mapping::unified_framework::schema::ctg::ctgType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

            //@}

            void
            operator<< (::xercesc::DOMElement&, const communicatingTaskType&);

            void
            operator<< (::xercesc::DOMElement&, const unsignedDouble&);

            void
            operator<< (::xercesc::DOMAttr&, const unsignedDouble&);

            void
            operator<< (::xml_schema::list_stream&,
                        const unsignedDouble&);

            void
            operator<< (::xercesc::DOMElement&, const deadlineType&);

            void
            operator<< (::xercesc::DOMElement&, const volume&);

            void
            operator<< (::xercesc::DOMAttr&, const volume&);

            void
            operator<< (::xml_schema::list_stream&,
                        const volume&);

            void
            operator<< (::xercesc::DOMElement&, const type&);

            void
            operator<< (::xercesc::DOMAttr&, const type&);

            void
            operator<< (::xml_schema::list_stream&,
                        const type&);
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SRC_RO_ULBSIBIU_ACAPS_CTG_XML_SCHEMA_CTG_HXX
